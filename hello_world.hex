# Custom ELF binary for "Hello, world!"


# ELF header
7f 45 4c 46 02 01 01 00 # 0000    ELF magic, 64-bit format, little endian, ELF version, System V target OS
00 00 00 00 00 00 00 00 # 0008    ABI version (ignored), padding bytes
02 00 3e 00 01 00 00 00 # 0010    ET_EXEC object file type, x86-64, ELF version
78 00 40 00 00 00 00 00 # 0018    Address of entry point
40 00 00 00 00 00 00 00 # 0020    Start of program header table
00 00 00 00 00 00 00 00 # 0028    Start of section header table
00 00 00 00 40 00 38 00 # 0030    Flags that are architecture specific, ELF header size, program header table entry size
01 00 40 00 00 00 00 00 # 0038    Number of entries in program header table, section header table entry size, index of section header table that contains the section names


# Program header

## First entry (text segment)
01 00 00 00 05 00 00 00 # 0040    PT_LOAD (Loadable segment), PF_X & PF_R (executable and readable)
78 00 00 00 00 00 00 00 # 0048    Offset of segment in file
78 00 40 00 00 00 00 00 # 0050    Virtual address of the segment in memory
00 00 00 00 00 00 00 00 # 0058    Segment's physical address (not relevant in this case)
2e 00 00 00 00 00 00 00 # 0060    Size in bytes of the segment in the file image 
2e 00 00 00 00 00 00 00 # 0068    Size in bytes of the segment in memory 
00 10 00 00 00 00 00 00 # 0070    Alignment - p_vaddr \equiv p_offset (modulo p_align)

# Text segment (virtual address of 0x400078)
b8 01 00 00 00          # 0078    mov    eax,0x1
48 8d 35 13 00 00 00    # 007D    lea    rsi,[rip+0x13]
ba 0e 00 00 00          # 0084    mov    edx,0xe
89 c7                   # 0089    mov    edi,eax
0f 05                   # 008B    syscall
b8 3c 00 00 00          # 008D    mov    eax,0x3c
31 ff                   # 0092    xor    edi,edi
0f 05                   # 0094    syscall
c3                      # 0096    ret

48 65 6c 6c 6f 2c 20 77 # 0097    "Hello, W
6f 72 6c 64 21 0a 00    # 009F    orld!\n"
